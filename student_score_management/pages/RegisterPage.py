# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RegisterPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QMainWindow
from tools import MessageBoxTools
import dao.UserDao
from connector import DatabaseDriver
import pages.LoginPage


class RegisterPage(QMainWindow):

    def __init__(self):
        super().__init__()
        self.driver = DatabaseDriver.DatabaseDriver()
        self.login_page = None
        self.setupUi()
        self.show()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(655, 464)
        self.setStyleSheet("background-image: url(views/imgs/2.jpg);")
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(220, 10, 250, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 110, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 190, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 280, 130, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.username_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.username_edit.setGeometry(QtCore.QRect(170, 110, 361, 41))
        self.username_edit.setObjectName("username_edit")
        self.password_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.password_edit.setGeometry(QtCore.QRect(170, 190, 361, 41))
        self.password_edit.setObjectName("password_edit")
        self.password_edit_repeat = QtWidgets.QLineEdit(self.centralwidget)
        self.password_edit_repeat.setGeometry(QtCore.QRect(170, 270, 361, 41))
        self.password_edit_repeat.setObjectName("password_edit_repeat")
        self.register_btn = QtWidgets.QPushButton(self.centralwidget)
        self.register_btn.setGeometry(QtCore.QRect(560, 170, 75, 81))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.register_btn.setFont(font)
        self.register_btn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.register_btn.setObjectName("register_btn")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 655, 22))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

        self.register_btn.clicked.connect(self.register_account)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "用户注册"))
        self.label_2.setText(_translate("MainWindow", "账号:"))
        self.label_3.setText(_translate("MainWindow", "密码:"))
        self.label_4.setText(_translate("MainWindow", "确认密码:"))
        self.username_edit.setPlaceholderText(_translate("MainWindow", "请输入你的用户名"))
        self.password_edit.setPlaceholderText(_translate("MainWindow", "请输入你的密码"))
        self.password_edit_repeat.setPlaceholderText(_translate("MainWindow", "请确认你的密码"))
        self.register_btn.setText(_translate("MainWindow", "注册"))

    def register_account(self):
        # 判断用户名是否为数字,不为数字则警告
        if not self.username_edit.text().isdigit():
            MessageBoxTools.warning("注意", "请输入正确的用户名（或学号）！")
            return
        username: str = self.username_edit.text()
        password: str = self.password_edit.text()
        repeat_password: str = self.password_edit_repeat.text()
        # 用户名校验
        # 定义一个信号，如果为0则为教师，为1则为学生
        flag = None
        if username == None:
            MessageBoxTools.warning("注意", "用户名不为空！")
        elif len(username) == 6:
            flag = 0
        elif len(username) == 10:
            flag = 1
        else:
            MessageBoxTools.warning("注意", "请输入正确的学号或教师号！！")
            return
        # 密码校验
        if password == None:
            MessageBoxTools.warning("注意", "密码不为空！")
        elif len(password) < 6 or len(password) > 13:
            MessageBoxTools.warning("注意", "请输入6-13位的密码！")
            return
        if password != repeat_password:
            MessageBoxTools.warning("注意", "两次密码不同！")
        else:
            # 如果为10位数则为教师
            if flag == 0:
                teacher_count:int = dao.UserDao.register_user(self.driver, username, password, "教师")
                # 判断用户是否已注册
                if teacher_count == 0:
                    MessageBoxTools.warning("注意", "用户已注册！")
                else:
                    MessageBoxTools.warning("注意", "用户注册成功！")
                    self.login_page = pages.LoginPage.LoginPage()
                    self.close()
            # 如果为6为数则为学生
            elif flag == 1:
                student_count: int = dao.UserDao.register_user(self.driver, username, password, "学生")
                if student_count == 0:
                    MessageBoxTools.warning("注意", "用户已注册！")
                else:
                    MessageBoxTools.warning("注意", "用户注册成功！")
                    self.login_page = pages.LoginPage.LoginPage()
                    self.close()
        return
