# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TeacherPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QMainWindow, QListWidgetItem, QSize, QWidget, QHBoxLayout, QVBoxLayout, QLabel

import tools.MessageBoxTools
import dao.UserDao
import dao.TeacherDao
from connector import DatabaseDriver
import pages.LoginPage


class TeacherPage(QMainWindow):

    def __init__(self):
        super().__init__()
        self.driver = DatabaseDriver.DatabaseDriver()
        # 定义一个私有变量获取成绩表中学生的学号和姓名
        self.score_names_usernames = dao.TeacherDao.get_score_name_username(self.driver)
        self.setupUi()
        self.show()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(679, 524)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.toolBox = QtWidgets.QToolBox(self.centralwidget)
        self.toolBox.setGeometry(QtCore.QRect(0, 0, 671, 501))
        self.toolBox.setStyleSheet("background-image: url(views/imgs/3.jpg);")
        self.toolBox.setObjectName("toolBox")
        self.page = QtWidgets.QWidget()
        self.page.setGeometry(QtCore.QRect(0, 0, 671, 459))
        self.page.setObjectName("page")
        self.user_name_search_edit = QtWidgets.QLineEdit(self.page)
        self.user_name_search_edit.setGeometry(QtCore.QRect(160, 30, 351, 41))
        self.user_name_search_edit.setObjectName("user_name_search_edit")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(70, 30, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.search_btn = QtWidgets.QPushButton(self.page)
        self.search_btn.setGeometry(QtCore.QRect(560, 20, 75, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.search_btn.setFont(font)
        self.search_btn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.search_btn.setObjectName("search_btn")
        self.user_listview = QtWidgets.QListWidget(self.page)
        self.user_listview.setGeometry(QtCore.QRect(10, 90, 651, 331))
        self.user_listview.setObjectName("user_listview")
        self.toolBox.addItem(self.page, "")
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setGeometry(QtCore.QRect(0, 0, 671, 459))
        self.page_2.setObjectName("page_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(130, 140, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.page_2)
        self.label_3.setGeometry(QtCore.QRect(130, 180, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.chinese_edit = QtWidgets.QLineEdit(self.page_2)
        self.chinese_edit.setGeometry(QtCore.QRect(270, 130, 261, 31))
        self.chinese_edit.setObjectName("chinese_edit")
        self.label_4 = QtWidgets.QLabel(self.page_2)
        self.label_4.setGeometry(QtCore.QRect(130, 220, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.math_edit = QtWidgets.QLineEdit(self.page_2)
        self.math_edit.setGeometry(QtCore.QRect(270, 170, 261, 31))
        self.math_edit.setObjectName("math_edit")
        self.label_5 = QtWidgets.QLabel(self.page_2)
        self.label_5.setGeometry(QtCore.QRect(130, 10, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.english_edit = QtWidgets.QLineEdit(self.page_2)
        self.english_edit.setGeometry(QtCore.QRect(270, 210, 261, 31))
        self.english_edit.setObjectName("english_edit")
        self.user_name_edit = QtWidgets.QLineEdit(self.page_2)
        self.user_name_edit.setGeometry(QtCore.QRect(270, 10, 261, 31))
        self.user_name_edit.setObjectName("user_name_edit")
        self.score_update_btn = QtWidgets.QPushButton(self.page_2)
        self.score_update_btn.setGeometry(QtCore.QRect(500, 290, 75, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.score_update_btn.setFont(font)
        self.score_update_btn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.score_update_btn.setObjectName("score_update_btn")
        self.score_add_btn = QtWidgets.QPushButton(self.page_2)
        self.score_add_btn.setGeometry(QtCore.QRect(120, 290, 75, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.score_add_btn.setFont(font)
        self.score_add_btn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.score_add_btn.setObjectName("score_add_btn")
        self.score_del_btn = QtWidgets.QPushButton(self.page_2)
        self.score_del_btn.setGeometry(QtCore.QRect(300, 290, 75, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.score_del_btn.setFont(font)
        self.score_del_btn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.score_del_btn.setObjectName("score_del_btn")
        self.label_6 = QtWidgets.QLabel(self.page_2)
        self.label_6.setGeometry(QtCore.QRect(130, 50, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.user_num_edit = QtWidgets.QLineEdit(self.page_2)
        self.user_num_edit.setGeometry(QtCore.QRect(270, 50, 261, 31))
        self.user_num_edit.setObjectName("user_num_edit")
        self.label_7 = QtWidgets.QLabel(self.page_2)
        self.label_7.setGeometry(QtCore.QRect(130, 90, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.user_sex_edit = QtWidgets.QLineEdit(self.page_2)
        self.user_sex_edit.setGeometry(QtCore.QRect(270, 90, 261, 31))
        self.user_sex_edit.setObjectName("user_sex_edit")
        self.toolBox.addItem(self.page_2, "")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 679, 18))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi(self)
        self.toolBox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        self.show_all_scores()

        # 点击搜索按钮
        self.search_btn.clicked.connect(self.search_btn_clicked)

        # 点击添加按钮
        self.score_add_btn.clicked.connect(self.score_add_btn_click)

        # 点击删除按钮
        self.score_del_btn.clicked.connect(self.score_del_btn_click)

        # 点击修改按钮
        self.score_update_btn.clicked.connect(self.score_update_btn_click)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "用户名:"))
        self.search_btn.setText(_translate("MainWindow", "搜索"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("MainWindow", "查询操作"))
        self.label_2.setText(_translate("MainWindow", "高数成绩:"))
        self.label_3.setText(_translate("MainWindow", "体育成绩:"))
        self.label_4.setText(_translate("MainWindow", "英语成绩:"))
        self.label_5.setText(_translate("MainWindow", "学生姓名:"))
        self.score_update_btn.setText(_translate("MainWindow", "修改"))
        self.score_add_btn.setText(_translate("MainWindow", "添加"))
        self.score_del_btn.setText(_translate("MainWindow", "删除"))
        self.label_6.setText(_translate("MainWindow", "学生学号:"))
        self.label_7.setText(_translate("MainWindow", "学生性别:"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_2), _translate("MainWindow", "表单操作"))

    # 点击搜索按钮
    def search_btn_clicked(self):
        # 如果搜索框为空，则展示全部成绩
        if self.user_name_search_edit.text() == '':
            self.show_all_scores()
        else:
            self.name: str = self.user_name_search_edit.text()
            self.result = dao.TeacherDao.get_score_name_by_all(self.driver, self.name)
            names = ["学号:", "学生姓名:", "性别：", "高数成绩：", "体育成绩：", "英语成绩："]
            self.user_listview.clear()
            if len(self.result) == 0:
                tools.MessageBoxTools.warning("注意", "未查询到该学生成绩！")
            for info in self.result:
                item = QListWidgetItem()
                item.setSizeHint(QSize(200, 100))
                widget = QWidget()
                layout_main = QHBoxLayout()
                layout_main_left = QHBoxLayout()
                layout_main_vertical = QVBoxLayout()
                lbl = QLabel()
                lbl.setText("{}{}\t{}{}\t{}{}\t{}{}\t{}{}\t{}{}".format(
                    names[0], info[0], names[1], info[1], names[2], info[2], names[3], info[3]
                    , names[4], info[4], names[5], info[5]
                ))
                lbl.setStyleSheet("color: rgb(0,0,0);")
                layout_main_vertical.addWidget(lbl)
                layout_main_left.addLayout(layout_main_vertical)

                layout_main.addLayout(layout_main_left)

                widget.setLayout(layout_main)

                self.user_listview.addItem(item)
                self.user_listview.setItemWidget(item, widget)

    # 展示所有学生的成绩
    def show_all_scores(self):
        # 初始化展示所有学生的成绩
        self.result = dao.TeacherDao.get_score_all(self.driver)
        names = ["学号:", "学生姓名:", "性别：", "高数成绩：", "体育成绩：", "英语成绩："]
        self.user_listview.clear()
        for info in self.result:
            item = QListWidgetItem()
            item.setSizeHint(QSize(200, 100))
            widget = QWidget()
            layout_main = QHBoxLayout()
            layout_main_left = QHBoxLayout()
            layout_main_vertical = QVBoxLayout()
            lbl = QLabel()
            lbl.setText("{}{}\t{}{}\t{}{}\t{}{}\t{}{}\t{}{}".format(
                names[0], info[0], names[1], info[1], names[2], info[2], names[3], info[3]
                , names[4], info[4], names[5], info[5]
            ))

            lbl.setStyleSheet("color: rgb(0,0,0);")
            layout_main_vertical.addWidget(lbl)
            layout_main_left.addLayout(layout_main_vertical)

            layout_main.addLayout(layout_main_left)

            widget.setLayout(layout_main)

            self.user_listview.addItem(item)
            self.user_listview.setItemWidget(item, widget)

    # 添加学生的成绩
    def score_add_btn_click(self):
        self.student_name = self.user_name_edit.text()
        self.student_num = self.user_num_edit.text()
        self.student_sex = self.user_sex_edit.text()
        self.student_chinese = self.chinese_edit.text()
        self.student_math = self.math_edit.text()
        self.student_english = self.english_edit.text()
        # 查询数据库中所有的学生姓名进行判断
        for name in self.score_names_usernames:
            if name[0] == self.student_name:
                tools.MessageBoxTools.warning("注意", "已存在该学生成绩!")
                return
            else:
                if self.student_name == '':
                    tools.MessageBoxTools.warning("注意", "请输入学生姓名")
                else:
                    if not self.student_name.isalpha():
                        tools.MessageBoxTools.warning("注意", "请输入规范的学生姓名")
                    else:
                        # 如果已存在成绩则返回警告
                        # 获取全部学生姓名与学号
                        username = dao.TeacherDao.get_score_name_username(self.driver)
                        for num in username:
                            if self.student_num == num[1]:
                                tools.MessageBoxTools.warning("注意", "该学生成绩已录入！")
                                return
                        if not self.student_num.isdigit() or len(self.student_num) != 10:
                            QtWidgets.QMessageBox.warning(self, "注意", "请输入正确的10位学号！")
                            return
                        else:
                            if self.student_sex != '男' and self.student_sex != '女':
                                QtWidgets.QMessageBox.warning(self, "注意", "请输入正常性别")
                            else:
                                # 使文本当中只能输入.与数字
                                string = "."
                                if (string not in self.student_chinese and not self.student_chinese.isdigit()) \
                                        or (string not in self.student_math and not self.student_math.isdigit()) \
                                        or (string not in self.student_english and not self.student_english.isdigit()):
                                    QtWidgets.QMessageBox.warning(self, "注意", "请输入正常成绩")
                                else:
                                    self.student_chinese = float((self.chinese_edit.text()))
                                    self.student_math = float(self.math_edit.text())
                                    self.student_english = float(self.english_edit.text())
                                    if self.student_chinese > 150 or self.student_chinese < 0:
                                        QtWidgets.QMessageBox.warning(self, "注意", "请输入正常高数成绩(0-150)")
                                    elif self.student_chinese % 1 != 0 and self.student_chinese % 1 != 0.5:
                                        QtWidgets.QMessageBox.warning(self, "注意", "高数成绩必须是半分或整数")
                                    else:
                                        if self.student_math > 150 or self.student_math < 0:
                                            QtWidgets.QMessageBox.warning(self, "注意", "请输入正常体育成绩(0-150)")
                                        elif self.student_math % 1 != 0 and self.student_math % 1 != 0.5:
                                            QtWidgets.QMessageBox.warning(self, "注意", "体育成绩必须是半分或整数")
                                        else:
                                            if self.student_english > 150 or self.student_english < 0:
                                                QtWidgets.QMessageBox.warning(self, "注意", "请输入正常英语成绩(0-150)")
                                            elif self.student_english % 1 != 0 and self.student_english % 1 != 0.5:
                                                QtWidgets.QMessageBox.warning(self, "注意", "英语成绩必须是半分或整数")
                                            else:
                                                dao.TeacherDao.insert_score(self.driver, self.student_num,
                                                                            self.student_name,
                                                                            self.student_sex,
                                                                            self.student_chinese, self.student_math,
                                                                            self.student_english)
                                                QtWidgets.QMessageBox.information(self, "注意", "成功添加该学生成绩！")
                                                self.score_names_usernames = dao.TeacherDao.get_score_name_username(
                                                    self.driver)

                    return

    # 定义用户删除函数
    def score_del_btn_click(self):
        self.student_name = self.user_name_edit.text()
        self.student_num = self.user_num_edit.text()
        if self.student_name == '':
            tools.MessageBoxTools.warning("注意", "请输入你要删除的学生姓名！")
            return
        else:
            if self.student_num == '':
                tools.MessageBoxTools.warning("注意", "请输入你要删除的学生学号!")
            else:
                # 查询数据库是否存在对应的姓名与学号
                for name, username in self.score_names_usernames:
                    if self.student_name == name and self.student_num == username:
                        notice = QtWidgets.QMessageBox.question(self, "注意", "你确定要删除该学生对应的成绩吗?",
                                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                        if (notice == QtWidgets.QMessageBox.Yes):
                            dao.TeacherDao.delete_score_by_name_username(self.driver, self.student_name,
                                                                         self.student_num)
                            QtWidgets.QMessageBox.information(self, "提示", "你已成功删除该学生对应的成绩！")
                            self.score_names_usernames = dao.TeacherDao.get_score_name_username(
                                self.driver)
                        return
                tools.MessageBoxTools.warning("注意", "请输入正确的学生姓名和学号！")
                return

    def score_update_btn_click(self):
        self.student_name = self.user_name_edit.text()
        self.student_num = self.user_num_edit.text()
        self.student_sex = self.user_sex_edit.text()
        self.student_chinese = self.chinese_edit.text()
        self.student_math = self.math_edit.text()
        self.student_english = self.english_edit.text()
        # 便利获取所有学生的用户名与姓名
        for usernames in self.score_names_usernames:
            # 如果查询到的姓名匹配
            if usernames[1] == self.student_num:
                if self.student_name == '':
                    tools.MessageBoxTools.warning("注意", "请输入学生姓名！")
                else:
                    if not self.student_name.isalpha():
                        tools.MessageBoxTools.warning("注意", "请输入规范的学生姓名！")
                    else:
                        if self.student_sex != '男' and self.student_sex != '女':
                            QtWidgets.QMessageBox.warning(self, "注意", "请输入正常性别！")
                        else:
                            # 使文本当中只能输入.与数字
                            string = "."
                            if (string not in self.student_chinese and not self.student_chinese.isdigit()) \
                                    or (string not in self.student_math and not self.student_math.isdigit()) \
                                    or (string not in self.student_english and not self.student_english.isdigit()):
                                QtWidgets.QMessageBox.warning(self, "注意", "请输入正常成绩！")
                            else:
                                self.student_chinese = float((self.chinese_edit.text()))
                                self.student_math = float(self.math_edit.text())
                                self.student_english = float(self.english_edit.text())
                                if self.student_chinese > 150 or self.student_chinese < 0:
                                    QtWidgets.QMessageBox.warning(self, "注意", "请输入正常高数成绩(0-150)！")
                                elif self.student_chinese % 1 != 0 and self.student_chinese % 1 != 0.5:
                                    QtWidgets.QMessageBox.warning(self, "注意", "高数成绩必须是半分或整数！")
                                else:
                                    if self.student_math > 150 or self.student_math < 0:
                                        QtWidgets.QMessageBox.warning(self, "注意", "请输入正常体育成绩(0-150)！")
                                    elif self.student_math % 1 != 0 and self.student_math % 1 != 0.5:
                                        QtWidgets.QMessageBox.warning(self, "注意", "体育成绩必须是半分或整数！")
                                    else:
                                        if self.student_english > 150 or self.student_english < 0:
                                            QtWidgets.QMessageBox.warning(self, "注意", "请输入正常英语成绩(0-150)！")
                                        elif self.student_english % 1 != 0 and self.student_english % 1 != 0.5:
                                            QtWidgets.QMessageBox.warning(self, "注意", "英语成绩必须是半分或整数！")
                                        else:
                                            dao.TeacherDao.update_score_by_username(self.driver, self.student_num,
                                                                                    self.student_name,
                                                                                    self.student_sex,
                                                                                    self.student_chinese,
                                                                                    self.student_math,
                                                                                    self.student_english)
                                            QtWidgets.QMessageBox.information(self, "提示", "你已成功修改该学生成绩！")
                                            self.score_names_usernames = dao.TeacherDao.get_score_name_username(
                                                self.driver)
                return
        tools.MessageBoxTools.warning("注意", "请输入正确的10位学生学号!")
        return

    # 定义页面的关闭方法
    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self, "注意", "你确定要关闭我吗？？",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        if (result == QtWidgets.QMessageBox.Yes):
            event.accept()
            self.login_page = pages.LoginPage.LoginPage()
        else:
            event.ignore()
